//------------------------------------------------
//--- 010 Editor v2.0 Binary Template
//
//      File: WAV.bt
//    Author: SweetScape Software, Paulo Max Gil I Reis
//   Version: 1.3
//   Purpose: Parse WAV audio files.
//  Category: Audio
// File Mask: *.wav
//  ID Bytes: 52 49 46 46 [+4] 57 41 56 45 //RIFF????WAVE
//   History:  
//   1.3   2023-06-09 SweetScape: Updated to use template styles.
//   1.2   2020-02-04 Paulo Max: Improved to correct parsing of DVI ADPCM and fix some issues in subchunk list parsing.
//   1.1   2015-10-05 SweetScape: Updated header for repository submission.
//   1.0   SweetScape: Initial release.
//
// More information available at:
//  https://en.wikipedia.org/wiki/WAV
//------------------------------------------------
RequiresVersion( 14 );

// Typedefs for the wave file
typedef char ID[4];

// Record whether we have found a format chunk yet
local int haveValidFormat = false;

//-----------------------------------
// Define structures used in WAV files

// Stores the file header information
typedef struct 
{
    ID     groupID <style=sHeading1Accent>;
    long   size;
    ID     riffType;
} WAVRIFFHEADER <style=sHeading1>;

// Stores the format information for the file
typedef struct {
    ID             chunkID <style=sHeading2Accent>;
    long           chunkSize;
    local int pos = FTell();
    short          wFormatTag;
    unsigned short wChannels;
    unsigned long  dwSamplesPerSec;
    unsigned long  dwAvgBytesPerSec;
    unsigned short wBlockAlign;
    unsigned short wBitsPerSample;
    if (wFormatTag == 17) //DVI IMA ADPCM
    {
        unsigned short wcbsize;
        unsigned short wSamplesPerBlock;
    }

    // Mark that we have found a valid format chunk
    haveValidFormat = true;

    // Unknown data at the end of the chunk
    if( chunkSize > (FTell() - pos) )
        uchar unknown[ chunkSize - (FTell() - pos) ];

    // Padding so the next chunk starts on an even byte
    if( chunkSize & 1 )
        uchar padding;
} FORMATCHUNK <style=sHeading2>;

// Stores the actual wave data
typedef struct 
{
    ID             chunkID   <style=sDataAccent>;
    long           chunkSize <style=sDataAccent>;

    // Test if we have a valid format
    if( !haveValidFormat )
    {
        Warning( "File contains no valid WAVE format chunk." );
        return -1;
    }

    // Parse the samples of the data
    if( ((format.wBitsPerSample != 8) && (format.wBitsPerSample != 16) && (format.wBitsPerSample != 32)) 
        || (chunkSize % (int)format.wBlockAlign != 0) )
    {
        // Unsupported storage method used
        unsigned char  waveformData[chunkSize];
    }
    else if( (format.wChannels == 1) && (format.wBitsPerSample == 8) )
    {
        // Define an array of 8-bit samples - common case
        uchar samples[ chunkSize ];
    }
    else if( (format.wChannels == 1) && (format.wBitsPerSample == 16) )
    {
        // Define an array of 16-bit samples - common case
        short samples[ chunkSize/2 ];
    }
    else if( (format.wChannels == 1) && (format.wBitsPerSample == 32) )
    {
        // Define an array of 32-bit samples - common case
        int samples[ chunkSize/4 ];
    }
    else
    {
        // Define general case sample
        struct SAMPLES {
            if( format.wBitsPerSample == 8 )
                 uchar channels[ format.wChannels ];
            else if( format.wBitsPerSample == 16 )
                 short channels[ format.wChannels ];
            else if( format.wBitsPerSample == 32 )
                 int   channels[ format.wChannels ];
        } samples[ chunkSize / (int)format.wBlockAlign ];
    }

    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} DATACHUNK <style=sData>;

// Stores the size of the wave after decompression
typedef struct
{
    ID             chunkID;
    long           chunkSize;
    unsigned long  uncompressedSize;
} FACTCHUNK <style=sSection1>;

// Stores a list of cue points or markers to points in the data
typedef struct {
    long    dwIdentifier;
    long    dwPosition;
    ID      fccChunk;
    long    dwChunkStart;
    long    dwBlockStart;
    long    dwSampleOffset;
} CUEPOINT <style=sSection2>;

typedef struct {
    ID        chunkID;
    long      chunkSize;
    local int pos = FTell();
    long      dwCuePoints;
    CUEPOINT  points[dwCuePoints];

    // Unknown data at the end of the chunk
    if( chunkSize > (FTell() - pos) )
        uchar unknown[ chunkSize - (FTell() - pos) ];
} CUECHUNK <style=sSection3>;

// Define a list chunk with a set of subchunks
typedef struct {
    ID        chunkID;
    long      chunkSize;
    char      listData[chunkSize];

    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} LISTSUBCHUNK <style=sSection4>;

typedef struct {
    ID        chunkID;
    long      chunkSize;
    local quad pos = FTell();
    ID        chunkType;
    local uint size;
    local quad ftell;
    local quad info;

    // Read the subchunks
    // pos = 2118524
    // FTell() = 2118528
    // difference between FTell() - pos = 4 (chunkType)
    while( FTell() - pos < chunkSize ) {
        // FTell() + 4 = 2118532 (first byte after chunkID)
        // (+4 because after FTell() = 2118528 comes chunkID = IART until 2118531
        // size because after chunkID comes chunkSize again
        // size = 14 is the size of the second subchunk
        size = ReadUInt( FTell()+4 );
        ftell = FTell();
        info = pos;
        if  (FTell() - pos + size<= chunkSize)
            LISTSUBCHUNK subchunk;
        else
            uchar unknown[ chunkSize - (FTell() - pos) ];       
    }

    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} LISTCHUNK <style=sHeading4>;

// A chunk which could not be identified
typedef struct {
    ID        chunkID;
    long      chunkSize;
    uchar     unknownData[chunkSize];

    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} UNKNOWNCHUNK;

typedef struct {
    ubyte raw[4];

    local uint32 computed = raw[0];
    computed <<= 7;
    computed |= raw[1];
    computed <<= 7;
    computed |= raw[2];
    computed <<= 7;
    computed |= raw[3];

    if (raw[0] >= 0x80  ||  raw[1] >= 0x80  ||
        raw[2] >= 0x80  ||  raw[3] >= 0x80)
    {
        Printf("MP3: warning: invalid ID3v2 synchsafe integer\n");
    }
} synchsafe_integer <read=read_synchsafe_integer>;

string read_synchsafe_integer( synchsafe_integer &v )
{
    string s;
    SPrintf( s, "%u", v.computed );
    return s;
}

struct ID3v2_HEADER
{
    SetBackColor(0x91C4FF);

    char head[3]; // always must be "ID3" ($49 44 33)

    DisplayFormatDecimal();

    ubyte ver_major; // this byte will never be $FF
    ubyte ver_revision; // this byte will never be $FF

    struct FLAGS {
        ubyte UNSYNCHRONISATION_USED  : 1;
        ubyte EXTENDED_HEADER_PRESENT : 1;
        ubyte EXPERIMENTAL_TAG        : 1;
        ubyte                         : 5;
    } flags;

    DisplayFormatHex();

    synchsafe_integer size; // Is the size of the complete tag after unsynchronisation,
                   // including padding, excluding the header but not excluding
                   // the extended header (total tag size - 10). Most
                   // significant bit (bit 7) of each byte is set to zero
};

// NEW ID3 chunk
//// DOCS
// GEOB docs: https://mutagen-specs.readthedocs.io/en/latest/id3/id3v2.3.0.html
//ID3v2.4 docs: 
typedef struct {
    ID   chunkID;
    long      chunkSize;
    ID3v2_HEADER hdr;
    // pos is the first position after the ID3 header
    local quad pos = FTell();
    local uint size;
    local quad info = FTell();

    // Read the subchunks
    // chunkSize = 1652 (all bytes after chunkID and chunkSize): 1660 - 8 = 1652
    // FTell() = 2116874
    // pos = 2116864
    // FTell() - pos = 10
    info = hdr.size.computed;
    
    
    // Ab einschl G von GEOB sind noch hdr.size.computed = 1642 bis VOR LIST
    //Printf("Hello");
    while(FTell() - pos < hdr.size.computed) {
        // Liest den uint-wert aus dem aktuellen+4 byte
        size = ReadUInt( FTell()+4 );
        if(FTell() - pos + size <= hdr.size.computed)
            LISTSUBCHUNK subchunk;
        else
            uchar unknown[ hdr.size.computed - (FTell() - pos) ];
    }

    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} ID3 <style=sSection3>;


// NEW
// NEW
// NEW
enum <ubyte> ID3_GENRES
{
    Blues, Classic_Rock, Country, Dance, Disco, Funk, Grunge, Hip_Hop, // 7
    Jazz, Metal, New_Age, Oldies, Other, Pop, R_and_B, Rap, // 15
    Reggae, Rock, Techno, Industrial, Alternative, Ska, Death_Metal, Pranks, // 23
    Soundtrack, Euro_Techno, Ambient, Trip_Hop, Vocal, Jazz_Funk, Fusion, Trance, // 31
    Classical, Instrumental, Acid, House, Game, Sound_Clip, Gospel, Noise, // 39
    AlternRock, Bass, Soul, Punk, Space, Meditative, Instrumental_Pop, Instrumental_Rock, // 47
    Ethnic, Gothic, Darkwave, Techno_Industrial, Electronic, Pop_Folk, Eurodance, Dream, // 55
    Southern_Rock, Comedy, Cult, Gangsta, Top_40, Christian_Rap, Pop_Funk, Jungle, // 63
    Native_American, Cabaret, New_Wave, Psychadelic, Rave, Showtunes, Trailer, Lo_Fi, // 71
    Tribal, Acid_Punk, Acid_Jazz, Polka, Retro, Musical, Rock_n_Roll, Hard_Rock, // 79
    Folk, Folk_Rock, National_Folk, Swing, Fast_Fusion, Bebob, Latin, Revival, // 87
    Celtic, Bluegrass, Avantgarde, Gothic_Rock,
    Progressive_Rock, Psychedelic_Rock, Symphonic_Rock, Slow_Rock, // 95
    Big_Band, Chorus, Easy_Listening, Acoustic, Humour, Speech, Chanson, Opera, // 103
    Chamber_Music, Sonata, Symphony, Booty_Bass, Primus, Porn_Groove, Satire, Slow_Jam, // 111
    Club, Tango, Samba, Folklore, Ballad, Power_Ballad, Rhythmic_Soul, Freestyle, // 119
    Duet, Punk_Rock, Drum_Solo, A_capella, Euro_House, Dance_Hall, Goa, Drum_and_Bass, // 127
    Club_House, Hardcore, Terror, Indie, BritPop, Negerpunk, Polsk_Punk, Beat, // 135
    Christian, Heavy_Metal, Black_Metal, Crossover,
    Contemporary, Christian_Rock, Merengue, Salsa, Thrash_Metal, Anime, JPop, Synthpop // 147
};


struct ID3v1_TAG
{
    DisplayFormatDecimal();

    SetBackColor(0x33BC55);
    char id[3]; // always must be "TAG"

    SetBackColor(0x48E048);
    char title[30];

    SetBackColor(0x5DE45D);
    char artist[30];

    SetBackColor(0x72E872);
    char album[30];

    SetBackColor(0x87EC87);
    char year[4];

    if ( ReadByte(FTell()+28) == 0  &&  ReadByte(FTell()+29) != 0 )
    {
        // We have ID3v1.1 tag

        SetBackColor(0x9CF09C);
        char comment[28];

        SetBackColor(0xB1F4B1);
        byte zero;

        SetBackColor(0xC6F8C6);
        ubyte track;
    }
    else
    {
        // We have ID3v1.0 tag

        SetBackColor(0x9CF09C);
        char comment[30];
    }

    SetBackColor(0xDBFCDB);
    ID3_GENRES genre;
};


struct ID3v2_FRAME
{
    char id[4]; // four alpha chars

    DisplayFormatDecimal();

    uint32 size; // frame size without frame header

    struct FRAME_FLAGS {
        uint16 TAG_ALTER_PRESERV  : 1;
        uint16 FILE_ALTER_PRESERV : 1;
        uint16 READ_ONLY_FRAME    : 1;
        uint16                    : 5;
        uint16 COMPRESSED_FRAME   : 1;
        uint16 ENCRYPTED_FRAME    : 1;
        uint16 GROUP_MEMBER_FRAME : 1;
        uint16                    : 5;
    } flags;

    if (id[0] == 'T')
    {
        // frame contains text related data
        if ( ReadByte(FTell()) == 0  &&  size > 1)
        {
            byte id_asciiz_str;
            char frame_data [size - 1];
        }
        else
            char frame_data [size];
    }
    else
    {
        DisplayFormatHex();
        ubyte frame_data [size];
    }
};

struct ID3v2_EXTENDED_HEADER
{
    SetBackColor(0xA1D4FF);

    DisplayFormatDecimal();

    uint32 size; // extended header size, excluding this 'size' field

    uint16 FLAG_CRC_PRESENT :  1;   // extended header flags
    uint16                  : 15;   //

    uint32 padding_sz;

    if (FLAG_CRC_PRESENT)
    {
        DisplayFormatHex();
        uint32 crc;
    }
};

struct ID3v2_4_FRAME
{
    char id[4]; // four alpha chars

    DisplayFormatDecimal();

    synchsafe_integer size; // frame size without frame header

    FRAME_FLAGS flags;
    
    if(id == "GEOB")
    {
        // filename starts 3 bytes after flags (FTell() + 2)
        local quad start_filename = FTell() + 2;
        Printf(id);
    }

    if (id[0] == 'T' || id == "GEOB")
    {
        // frame contains text related data
        enum <ubyte> {
            ISO_8859_1,
            UTF_16_with_BOM,
            UTF_16BE_without_BOM,
            UTF_8
        } encoding;
        
        if (id == "GEOBa")
        {
            ubyte   mime;
            
            // Filename
            // Run file until
                // while ReadByte(FTell()) != 0 (because filename has stopping byte (00))
                // while FTell() < size.computed - 3
            do
            {
                // description starts ... after ...
            }
            while(ReadByte(FTell()) != 0);
            char frame_data [size.computed - 2];
        }
        else
        {
            char frame_data [size.computed - 1];
        }
    }
    else
    {
        DisplayFormatHex();
        ubyte frame_data [size.computed];
    }
};

struct IDTHREETAG
{
    // Starting position of ID3 chunk is 8 bytes before ID3 header (4 "ID3 " chunkID, 4 chunkSize)
    local uint32 startpos_ID3Chunk = FTell() - 8;
    
    ID3v2_HEADER hdr;
    
    local quad info;

    // calculating real size of the ID3v2 tag
    local uint32 tag_sz = hdr.size.computed;
    
    //
    // An ID3v2 tag header can be detected with the following pattern:
    // $49 44 33 yy yy xx zz zz zz zz
    // Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80.
    //
    if (hdr.ver_major == 0xFF  ||  hdr.ver_revision == 0xFF)
    {
        Printf("MP3: warning: invalid ID3v2 tag header\n");
    }
    else
    {
        if ( !(hdr.ver_major == 3 || hdr.ver_major == 4)  ||  hdr.flags.UNSYNCHRONISATION_USED  ||  hdr.flags.EXPERIMENTAL_TAG)
        {
            Printf("MP3: warning: skipping unsupported ID3v2.%d tag\n", hdr.ver_major);
            SetBackColor(0xA9DCFF);
            DisplayFormatHex();
            ubyte id3v2_data[tag_sz];
        }
        else
        {
            if ( hdr.flags.EXTENDED_HEADER_PRESENT )
                ID3v2_EXTENDED_HEADER ext_hdr;

            // Now reading ID3v2 frames
            // A tag must contain at least one frame. A frame must be
            // at least 1 byte big, excluding the header.
            //
            local uint32 frame_color = 0xC9FCFF;
            do
            {
                SetBackColor(frame_color);
                if (hdr.ver_major == 3)
                    ID3v2_FRAME tf;
                else
                    ID3v2_4_FRAME tf;
                frame_color -= 0x020200;
            }
            // 4 bytes "ID3 ", 4 bytes chunksize, sizeof(hdr), tag_size
            while ( FTell() < startpos_ID3Chunk + 4 + 4 + sizeof(hdr) + tag_sz && ReadByte(FTell()) != 0 );
            info = startpos_ID3Chunk + 4 + 4 + sizeof(hdr) + tag_sz;
            SetBackColor(0x99CCFF);
            ubyte id3v2_padding [ startpos_ID3Chunk + 8 + tag_sz + sizeof(hdr) - FTell() ];
        }
    }
};

typedef struct {
    ID      chunkID;
    long    chunkSize;
    IDTHREETAG  id3tag;
} ID4 <style=sSection3>;

//---------------------------------------------

// Define the headers
LittleEndian(); 
WAVRIFFHEADER header;

// Check for valid header
if( header.groupID != "RIFF" || header.riffType != "WAVE" )
{
    Warning( "File is not a valid wave file. Template stopped." );
    return -1;
}

// Read the file as a set of chunks
local char tag[5];
local uint size;
while( !FEof() )
{
    // Read the chunk tag 
    ReadBytes( tag, FTell(), 4 );
    tag[4] = 0;

    // See which chunk this is
    switch( tag )
    {
        case "fmt ":
            FORMATCHUNK format;
            break;
        case "data":
            DATACHUNK   data;
            break;
        case "fact":
            FACTCHUNK   fact;
            break;
        case "cue ":
            CUECHUNK    cue;
            break;
        case "LIST":
            LISTCHUNK   list;
            break;
        case "ID3 ":
            ID4   id3;
            break;
        default:
            // Unknown chunk
            size = ReadUInt( FTell()+4 );
            Printf( "Encountered unknown chunk '%s' of size %d at position %Ld.\n",
                tag, size, FTell() );
            UNKNOWNCHUNK unknown;
            break;
    }
}